============
SonarQube
============

-> SonarQube is used for Code Quality Checking

-> SonarQube is called as Code Review Software

-> SonarQube is Free (Community Edition)

-> SonarQube is developed using Java language

-> SonarQube supports 20+ programming languages for Code Review

	Ex: Java, C#, Python, Node JS, PHP, Java Script, TypeScript, C, C++ etc....

==========================================
SonarQube will identify below things in the code
==========================================

1) Bugs (These bugs will break application functionality)

2) Vulnerabilities (Security issues, hackers can attack)

3) Code Smells (issues in code , recommended to fix but not danger) like declaring varibale which is not used or import packages like java.util.date or java.util.arrayList

4) Duplicate Code (repeated lines of code)

5) Code Coverage (howmany lines of code is tested in unit testing)


Note: For every project code review will happen in real-time

-> With the help of code review we can identify our mistakes and we can correct them


======================
SonarQube Server Setup
======================

Minimum RAM : 2 GB

t2.micro-> 1GB ram
t2.medium->4GB ram
		
-> Create EC2 instance with 4 GB RAM (t2.medium)

-> Connect with EC2 instance using MobaXterm
->check space (free -h)

-> Execute below commands in Ec2 instance
sudo yum update


$ sudo su
$ cd /opt
$ sudo yum install java-1.8.0-openjdk
$ java -version
$ wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-7.8.zip
$ unzip sonarqube-7.8.zip

Note: SonarQube server will not run with root user

-> Create new user in ec2 instance
$ useradd sonar

-> Configure sonar user without pwd in suderos file

$ visudo

-> Configure below line in sudoers file

sonar ALL=(ALL) NOPASSWD: ALL

-> Change ownership & file permissions for sonar folder
$ chown -R sonar:sonar /opt/sonarqube-7.8/
$ chmod -R 775 /opt/sonarqube-7.8
$ su - sonar

-> Goto bin directory then goto linux directory and run sonar server 

$ cd /opt/sonarqube-7.8/bin/linux-x86-64

$ sh sonar.sh start

-> Check sonar server status 

$ sh sonar.sh status

******************** Note: Sonar Server runs on 9000 port number by default ******************************

-> Enable 9000 port number in EC2-Instance Security Group as Inbound Rule

-> Now we can access our SonarQube server using below URL

		URL : http://EC2-Public-IP:9000/

Note: Default credentials of sonar

		uname: admin
		pwd: admin



===================================
SonarQube Integration with Maven Project
===================================

-> configure below properties in pom.xml file


<properties>
	<sonar.host.url>http://3.110.77.68:9000/</sonar.host.url>
	<sonar.login>admin</sonar.login>
	<sonar.password>admin</sonar.password>
  </properties>

-> execute below maven goal

	$ mvn sonar:sonar
==================================================================================================

->The provided steps explain how to integrate SonarQube with a Maven project to perform static code analysis and upload the results to a SonarQube server.

->The <properties> section in the Maven pom.xml defines the necessary configuration for connecting to the SonarQube server.

-><sonar.host.url>:Specifies the URL of the SonarQube server.In this case, the server is accessible at http://3.110.77.68:9000/.

-><sonar.login> and <sonar.password>:Credentials for authenticating with the SonarQube server.Here, admin is both the username and password (default credentials, often used for local setups).

->Purpose: These properties enable Maven to communicate with the SonarQube server. They are essential for sending the analysis report generated by Maven to SonarQube.

->mvn: Executes a Maven build command.

->sonar:sonar: A Maven plugin goal provided by the SonarQube Scanner for Maven.

===============
What Happens:
===============

=>Code Analysis:
The SonarQube Scanner performs static analysis on the project's source code.
It checks for code quality issues, bugs, vulnerabilities, code smells, and test coverage.

=>Report Generation:
A detailed analysis report is created, including:

=>Line-by-line code metrics.
Identified issues and their severity.
Suggestions for improvement.

=>Upload to SonarQube:
The generated report is uploaded to the configured SonarQube server (http://3.110.77.68:9000/).
You can view the results on the SonarQube web interface.


==========================
Real-World Usage
============================
=>Scenario:
A development team wants to maintain code quality and identify potential issues early in the development cycle.
The team integrates SonarQube with their Maven-based project.

=>Steps:
Configure the SonarQube server details in pom.xml.
Run the command mvn sonar:sonar after or during the build process.
Review the uploaded analysis report on the SonarQube dashboard.

===================================
Benefits of This Integration
====================================
=>Centralized Quality Metrics:
The team can track code quality, bugs, and vulnerabilities across all projects in one place.

=>Early Detection of Issues:
Static analysis helps catch potential problems during development rather than post-production.

=>Continuous Integration (CI):
This setup can be automated in CI pipelines like Jenkins, GitHub Actions, or GitLab CI to ensure code quality for every build.

========
Summary
========
This process connects your Maven project to SonarQube, allowing for:

Automated code analysis.
Centralized report uploads to the SonarQube server.
Insights into code quality and actionable feedback for improvement.


=============================================================================================================================================
->Quality profiles nothing but the set of rules that are going  to apply
->Quality gates will decide pass or fail status of the project in terms of code review.

-> for sonar version upto 7.8.0, java 1.8 is ok & suficient .if u download higher version of sonar then java 11 is minimum requirement

=============================================================================================================================================

->Foe new joinees immediately development tasks will not be assigned
->For first 2 to 3 months they will assign sonar fixes,unit test cases,code coverage relates task










