+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Source Code Repository Tools (or) Version Control Softwares
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-> Multiple developers will work for project development
-> Developers will be working from multiple locations
-> All developers code should be store at one place (Code Integration Should Happen)
-> To integrate all the developers source code at one place we will use Sourcecode Repository Softwares

Advantages with Source code repository sofwares
++++++++++++++++++++++++++++++++++++++++++++++
1) All the developers can connect to repository server and can integrate the code.
2) Repository server will provide monitored access

				- Who
			        - When
				- Why
				- What

Repository Tools
++++++++++++++++
SVN (outdated)
Git Hub
BitBucket

Environment Setup to work with Git Hub
++++++++++++++++++++++++++++++++++++++
1) Create Github account ( www.github.com )
2) Download and install Git Client software ( https://git-scm.com/downloads )
3) Once installation completed, right click on the mouse and verify git options display (If git options displaying our git client installation completed successfully)

Working with GitHub
+++++++++++++++++++
-> Login into github account with your credentials
-> Create Repository in github
Note: Repository is used to store project source code. Every Project will have one repository

-> When we create a repository, unique URL will be generated with Repository Name (i.e Repo URL)
-> All the developers will connect to repository using Repository URL
-> We can create 2 types of Repositories in Git Hub
	
			1) public repository (Anybody can see)
                        2) private repository(Nobody can see)

-> Public Repository means everybody can access but we can choose who can modify our repository
-> Private Repository means we will choose who can access and who can modify

Repo URL : https://github.com/ashokitschool/01-devops-app.git


Working with Git Bash
+++++++++++++++++++++
-> Git Bash we can use as Git Client software to perform Git Operations
-> Download and install git client (https://git-scm.com/downloads)
-> Right Click on Mouse and choose "Open Git Bash Here"

git help : It will display frequently used git commands

git help <cmd-name> : It will open documentation for given command

+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Configure Your Email and Name in GitBash with Commands
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

$ git config --global user.email "youremail@yourdomain.com"
$ git config --global user.name "name"
$ git init : To initialize our folder as git working tree folder
$ git clone : To clone git repository to our machine from github.com 

		Syntax : $ git clone <project-repo-url>
$ git status : It will display staged , un-staged and un-tracked files

		Syntax : $ git status

		Staged Files : The files which are added for commit.

		Un-Staged Files : The files which are modified but not added for commit.

		Un-tracked files : Newly created files.

Note: To commit a file(s), we should add to staging area first

$ git add : It is used to add file(s) to staging area

		Syntax : $ git add <file-name>

				$ git add .

$ git commit : It is used to commit staged files to git local repository

		Syntax : $ git commit -m 'reason for commit'

$ git push : To push changes from git local repository to git central repository

		Syntax  : $ git push


Steps to push code to github central repository
++++++++++++++++++++++++++++++++++++++++++++++++
1) Create one public repository in git hub (take github repo url)
2) Clone github repository using 'git clone' command

		$ git clone 'repo-url'

3) Navigate to repository folder

4) Create one file in repository folder

		$ touch Demo.java

5) Check status of the file using 'git status' command   

		$ git status (It will display as untracked file)

6) Add file to staging area using 'git add' command

		$ git add .

7) Commit file to git local repository

		$ git commit -m 'commit-msg'

8) Push file from git local repository to git central repository using 'git push' command

		$ git push

Note: If you are doing 'git push' for first time it will ask to enter your github account password.


------------------------------------------------------------------------------------------------------------------
Note: Git bash will ask our password only for first time. It will save our git credentials in Credential Manager in Windows machine.

-> Go to Credential Manager -> Windows Credentials -> Select Github -> We can modify and delete saved credentials from here
------------------------------------------------------------------------------------------------------------------

-> When we do git commit then it will geneate a commit-id with 40 characters length

-> From this commit-id it will display first 7 characters in git hub central repository

-> We can check commit history using 'git log' command

---------------------------------------------------------------------------------------------------------------------
Steps to commit Maven Project to Github Repository
---------------------------------------------------------------------------------------------------------------------

1) Create Maven Project

->If you already have a Maven project, you can skip this step. If not, you can create a new Maven project in your preferred IDE (e.g., IntelliJ IDEA, Eclipse) or use the Maven command line.

->To create a Maven project using the command line, use the following command (ensure Maven is installed):

mvn archetype:generate -DgroupId=com.example -DartifactId=my-maven-project -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

->This will create a basic Maven project with the structure

my-maven-project/
├── pom.xml
└── src/
    └── main/
        └── java/
            └── com/
                └── example/
                    └── App.java


2) Create GitHub Repository

Note: After creating git repository, it will display set of commands to execute

3) Initialize Git and Commit to GitHub Repository

->Open Git Bash in the Project Folder:

Navigate to your Maven project folder. If you're using an IDE, open the terminal there, or use the command line to navigate to the folder where the pom.xml file is located.


->Initialize Git Repository:Run the following command to initialize a local Git repository ->git init

->This creates a .git directory in your project folder, marking it as a Git repository.

->Add Files to the Staging Area:Add all the files in your Maven project to Git's staging area:git add .


->The . adds all the files in your project. You can also specify specific files if you only want to add certain files.

->Commit the Files:Commit the staged files with a meaningful commit message
git commit -m "Initial commit of Maven project"


->The -m flag allows you to add a commit message in quotes. This message is a description of the changes you are committing.

->Rename the Default Branch to main:By default, Git creates a branch named master. You can rename it to main (which is the new standard) using the following command:


git branch -M main



4)Connect Local Git Repository to GitHub Remote Repository

->Add Remote GitHub Repository:Add the GitHub repository URL (which you copied earlier) as the remote origin for your project. Replace <repo-url> with the actual URL

git remote add origin https://github.com/username/repository-name.git


->Push the Code to GitHub:Finally, push your changes to the GitHub repository using the git push command:

git push -u origin main


->The -u flag sets the upstream branch, meaning your local main branch will track the remote main branch. After the first push, you can simply use git push for subsequent pushes

->After Pushing:Once the push is successful, you can visit your GitHub repository URL to see your Maven project files on GitHub.
=========================
SUMMARY OF COMANDS
==================

$ git init                             # Initialize a Git repository
$ git add .                            # Stage all changes
$ git commit -m 'Initial commit'       # Commit the changes
$ git branch -M main                   # Rename the branch to 'main' (optional)
$ git remote add origin <repo-url>     # Add the remote GitHub repository
$ git push -u origin main              # Push the code to GitHub
=================================================================

####################
Important Notes:
###################
1)GitHub Authentication:
->If this is your first time pushing to GitHub, Git might ask for your GitHub username and password.

->Password: GitHub has deprecated password-based authentication. If prompted for a password, use a Personal Access Token (PAT) instead of your GitHub password.

->Generate a PAT in GitHub by going to Settings > Developer Settings > Personal Access Tokens > Generate New Token.


2).gitignore:

->Before adding and committing files, it’s a good practice to add a .gitignore file to avoid committing files that shouldn't be tracked (like target/ folder or .idea for IntelliJ). 

->Here's an example .gitignore for Maven projects:

target/
.idea/
.classpath
.project
.settings/
*.iml

3)Push Subsequent Changes:After making further changes to your Maven project, you can push them to GitHub using:

git add .
git commit -m "Update Maven project"
git push
--------------------------------------------------------------------------------------------------------------------

GIT BASH COMMANDS
git help
git help<cmd-name>
git config
git init
git status
git add . (add all files in staging)
git add <filename> (add perticuler file in staging)
git add --a (add files in staging)
git restore
git restore --staged <filename> or git restore --staged .
git commit -m 'msg'
git push
git clone <repo-url>
git log
git remote add 
git pull
--------------------------------------------------------------------------------------------------------
When we are working on one task suddenly we may get some other priority task.

++++++++++
Error
+++++++++++
If we push our code to repo & if this error occurred while pushing.remote:support for password authentication was removed on August 13 2021 then

go to->developer setting->generate token

save this token in your notepad

when we fire git push command then he asked username & password.type username & type password as your personal token.After that above issue will resolved 7 your code is commited succesfully on repo

+++++++++++++++
Conflict
+++++++++++++++
When two developers are working on the same file & done the changes then conflict occurred

Usecase
++++++++
-> Manager assigned task id : 101
-> I am working on that task (i am in middle of the task)
-> Manager told that stop the work for 101 and complete 102 on priority. 
-> Once 102 is completed then resume your work on 101

-> When manager asked me to start 102 task, i have already done few changes for 101 
  (partially completed)
  
-> We can't push partial changes to repository because with our partial changes existing functionality may break.

-> We can't delete our changes because we have spent few hours of time to implement those changes


++++++++++++
GIT Stash
++++++++++++++

working tree(local copy)->where we are doing our work
Unstaging area->Files Modified/newly created
Staging area->Files eligible to commit
Local repository->Git hub local repoi(in our PC)
Remote/Centram Repository->Git hub repo

++++++++++
use case
++++++++++
manager assigned BUG-121 to fix @9PM
You have started code changes to fix the bug
By 12PM few code changed completed (bug fixed partially)

By12PM Manger told that BUG-122 is on high priority than BUG-121
Park your work for BUG-121 ^& fix BUG-122 first & push the changes
Once BUG-122 completed then continue your work on BUG-121 fix

After doing some chnages ,to make working tree clean by storing our changes to temp storage we will use git stash option
how to remove changes from 121-by using git stash
when commiting & pushing code changed of 122 then to get back 121 code-by using git stash apply


***************  In this scenario we will go for 'git stash' option *********************very very important

=> Git stash is used to save working tree changes to temporary location and make working tree clean.

-> After priority work completed we can get stashed changes back using 'gitstash apply'

++++++++++++++++++++++++
To create file in repo

$ touch f1.txt
++++++++++++++++++++++++
q2+++++++++++
Git Branches
+++++++++++

-> Git Branches are used to maintain seperate code bases for our project(code bases in the repository)

->Multiple teams can work parallely using GIT branches concept

-> In GiT repository we can create multiple branches

master/main
develop
qa
uat
release
research

Note:we can create any no of branches in GIT repository

->To check we are in which branch then use $ git branch

->If you are working on any R&D task then its better to use new branch for your R&D so that existing functionality will not break


-> development team will integrate the code in 'develop' branch

-> bug-fixing team will integrate the code in 'qa' branch

-> R & D team will integrate the code in 'research' branch


-> In github we can create branches

->To clone default branch(master or main)

$ git clone <repo-url>

-> To clone particular branch in git repo we will use below command

		$ git clone -b <branch-name> <repo-url>

------------------------------------------------------------------------------------------------------------------

What is Git branch ?

Why we need git branches ?

How to create git branches ?

How to clone particular branch

How to switch from one branch to another branch

+++++++++++
Branch Merging
+++++++++++

=> The process of merging changes from one branch to another branch is called as Branch merging

=> We will use Pull Request for Branch Merging

=>We can merge changes  from one branch to another branch  using pull request

Steps to do branch merging or Lab task on branches
+++++++++++++++++++++++++++++++++++++++++++++++++++

1) Create feature branch from main branch

2) clone feature branch code using git bash

3) create new file in feature branch then commit and push to central repo

4) Go to central repository then create a  "pull request" to merge "feature" branch changes to "main" branch

Note: Once feature branch changes are merged to main branch then we can delete feature branch (if required)

+++++++++++++++++++++++++++
branch Switching
+++++++++++++++++++++++++++

=>Using git bash  we can switch from one branch to another branch using "checkout' command

$ git checkout <branch-name>

+++++++++++
What is .gitignore ?
+++++++++++
->It is a text file which is used to configure files/folders to ignore from git operations
Ex.target folder,.project file,.setting file & .classpath file

-> This file will not have any extension

-> This .gitignore is used to configure the files or folders which we want to ignore from our commits

-> The files and folders which are not required to commit to central repository those things we can configure in .gitnore file

Ex: In maven project 'target' folder will be available which is not required to commit to central repository. This we can configure in .gitignore file.

---------------------------------------.gitignore-------------------------------------------------------
HELP.md
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###
.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

++++++++++++++++++++++
git merge vs git rebase(frequetly asked for java developer & very very important question)

++++++++++++++++++++++
=>Both are used to merge changes from one branch to other branch
=>If we want to merge the chnages from one branch to another branch by preserving the commit historythen go for git merge command

=>=>If we want to merge the chnages from one branch to another branch by without preserving the commit history then go for git rebase command
 
=> These commands are used to merge changes from one branch to another branch

-> git merge will maintain commit history

-> git rebase will not maintain that rebase history

-> When we are working on particular sprint and we want to merge changes from one branch to another branch then we will use 'git merge' command

-> Once sprint-1 is delivered then we want to take latest code of sprint-1 to start sprint-2 development. 

In this scenario we don't need commit history so we will use 'git rebase' command.

// merge demo

-> create a  new folder(merge-demo) & navigate into that folder using git bash & execute below commands

git status
git init
touch m1.txt
git add .
git commit - m "added m1.txt"
git log 



git branch feature
git checkout feature

Note:From master branch we have created feature branch

touch f1.txt
git add .
git commit -m "added f1.txt"
git log

Feature contains f1.txt & m1.txt

If you switch to master you can see only m1.txt
git checkout master

//I will make few more changes to master
touch m2.txt
git add .
git commit -m "added m2.txt"
git log

The changes happened in master branch are relevent to feature.I want to get master branch changes to feature branch

we have two options git merge and git rebase  

git checkout feature(i have m1.txt & f1.txt but m2.txt not available )
git merge master(m2.txt we got into feature)
git log

Note:git merge command,commited all master branch changes to feature branch
Note:See commit history we can see that at what time merge happened it is displaying that

//rebase demo

-> create a  new folder(rebase-demo) & navigate into that folder & open cmd & execute below commands

git init
touch m1.txt
git add .
git commit - m "added m1.txt"
git log 
 
git branch feature
git checkout feature
touch f1.txt
git add .
git commit -m "added f1.txt"
git log

//making few more changes to master
git checkout master
touch m2.txt
git add .
git commit -m "added m2.txt"
git checkout feature

git rebase master (master branch changes will come to feature branch)

git log

Note:in commit history at thet time we have done rebase will not displayed 

Note:Git merge will maintain commit history and it will log when merge happened
Note:-Git rebase will make commit history linear

++++++++++++++++++++++
What is git pull command 
++++++++++++++++++++++

-> pull command is used to take latest changes from repository to local

-> When we want to make some changes to code, it is always recommended to take git pull


Note: When we execute 'git pull' there is a chance of getting conflicts. We need to resolve the conflict and we should push the code without conflicts.

--------------------------------------------------------------------------------------------------

+++++++++++++++++++++++++++
Interview Questiopns
++++++++++++++++++++++++++++++
What is Source Code repository
Why we need source code repository
What are the source code repository servers available
What is Code Integration
What is Monitored Access 
What is git hub
What is git 
What is version control(For every commit one version will be available or id will be avaialble)
What is Repository
Public Repository vs Private Repository
Cloning Repository
Staged vs Unstaged vs Untracked File(newly  created files)
Adding Files to Stating Area
Unstaging the files from staging
Discarding local changes
What is working tree
What is Local Repostiory
What is Central Repository
Commit from working tree to local repo
push from local repo to central repo
Taking latest code changes
push vs pull
What is conflict
How to resolve conflicts
What is branch in git hub
How to create branches
How to clone particular branch
how to switch to particular branch
How to merge branches
What is pull request
git merge vs rebase
what is .gitignore
git pull vs git fetch
============================================================================================================================

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Difference between pull & fetch command
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

pull means directly downloading the latest chnages from repository to local

Fetch command will not download the changes,its will just show you if there are any new changes in the repository which you have to take to your local

git init
git help
git config
git clone 
git status
git add .
git add <file-name>
git restore
git commit
git push
git pull
git log
git rm
git branch
git checkout
git merge
git rebase



+++++++++++
Assignment
++++++++++

1) Create Maven Web Application
2) Added 'Spring-Core' dependency in project pom.xml file
3) Package maven project as war file using maven goal
4) Create Git repository in github.com (public repo)
5) Push maven project into github repo using gitbash
   (target folder shouldn't be commited, add this is .gitignore file)
6) Make changes in pom.xml and push changes to github repo using git bash
7) Create 'feature' branch in git repo from main branch
8) Clone feature branch from git bash using git clone
9) Make changes in 'feature' branch pom.xml file and push changes to central repo
10) Create pull request and merge 'feature' branch changes to 'main' branch




















































































				
