=================
What is Swagger?
================
->Swagger is an open-source framework used to design, build, document, and consume RESTful web services.
->It is now part of the OpenAPI Initiative and is widely used for API development and documentation.
-> It provides a standardized way to describe the structure of your API, including:

Endpoints: The URLs of your API resources.
Methods: The HTTP methods supported by each endpoint (GET, POST, PUT, DELETE, etc.).
Parameters: The input parameters for each method (query parameters, path parameters, request body).
Responses: The expected output from each method (status codes, response bodies).
Data models: The structure of the data exchanged between the client and the server.

===================
Swagger provides:-
===================
->Interactive API Documentation: Auto-generates API documentation from your code.
->API Testing: Allows you to test your APIs directly from the documentation.
->Client SDK Generation: Generates client SDKs for various programming languages.
->Standardization: Ensures consistency in API design.

==========================
Key Benefits of Swagger
==========================
->Improved Documentation: Generates interactive API documentation that is easy to understand and use by developers.
->Early Detection of Issues: Allows you to validate your API design before implementation, catching potential errors early on.
->Code Generation: Automatically generates client SDKs and server stubs in various programming languages, saving development time.
->Faster Development: Provides a clear and concise specification for developers to work from, leading to faster and more efficient development.
->Better Collaboration: Facilitates better communication and collaboration between frontend and backend teams.

=========================================
How to Implement Swagger in Your Project:-
=========================================

Add dependency:-for maven

<dependency>
    <groupId>io.springfox</groupId>
    <artifactId>springfox-boot-starter</artifactId>
    <version>3.0.0</version>
</dependency>

gradle:-
implementation 'io.springfox:springfox-boot-starter:3.0.0'


===========================
Step 2: Configure Swagger:-
===========================
Create a configuration class to customize Swagger settings

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;

@Configuration
public class SwaggerConfig {
    @Bean
    public Docket api() {
        return new Docket(DocumentationType.OAS_30) // OpenAPI 3.0
                .select()
                .apis(RequestHandlerSelectors.any()) // Include all APIs
                .paths(PathSelectors.any()) // Include all paths
                .build();
    }
}
-------------------------------------------
@Configuration
@EnableSwagger2
public class SwaggerConfig {

    @Bean
    public Docket api() { 
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.any()) 
                .paths(PathSelectors.any()) 
                .build();
    }
}
------------------------------------------------

===============================
Step 3: Annotate Controllers:-
===============================
Use Swagger annotations in your controllers and models for better documentation.

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@Api(value = "User Management System", tags = "User APIs")
public class UserController {

    @GetMapping("/users")
    @ApiOperation(value = "Get all users", notes = "Fetch all users in the system")
    public List<String> getUsers() {
        return List.of("John", "Jane", "Doe");
    }
}
-----------------------------------------
@RestController
@RequestMapping("/users")
public class UserController {

    @GetMapping("/{id}")
    @ApiOperation(value = "Get user by ID", notes = "Retrieves a user by their unique ID")
    public User getUserById(@PathVariable Long id) { 
        // ...
    }
}

----------------------------------------------
=======================
Customize (Optional):-
======================

->API Info: Set the API title, version, description, etc.
->Path Selection: Specify which controllers or paths to include in the documentation.
->Data Model Annotations: Use annotations like @ApiModel, @ApiModelProperty to document your data models.
->By using annotations like @ApiOperation, @ApiParam, and @ApiModel, you can provide more detailed documentation within your code.



Model Example:

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

@ApiModel(description = "Details about the user")
public class User {
    @ApiModelProperty(notes = "The unique ID of the user")
    private Long id;

    @ApiModelProperty(notes = "The name of the user")
    private String name;

    // Getters and setters
}



==============================
Step 4: Access Swagger UI:-
==============================
After running your application, access the Swagger UI at:

http://localhost:8080/swagger-ui/ or http://localhost:8080/swagger-ui.html

This interactive interface allows you to:

->View API endpoints & their methods.
->Test API operations or Test API calls directly in the browser
->See request and response models or See input parameters and expected responses.
->Download API definitions in various formats (JSON, YAML).

=====================================
Step 5: Secure Swagger (Optional):-
====================================
->If your API is secured, ensure Swagger is also secured. You can configure a security scheme like OAuth2, API keys, or JWT:


import springfox.documentation.builders.ApiInfoBuilder;
import springfox.documentation.service.ApiKey;
import springfox.documentation.service.SecurityReference;
import springfox.documentation.spi.service.contexts.SecurityContext;
import springfox.documentation.spring.web.plugins.Docket;

@Configuration
public class SwaggerConfig {
    @Bean
    public Docket api() {
        return new Docket(DocumentationType.OAS_30)
                .securitySchemes(List.of(apiKey()))
                .securityContexts(List.of(securityContext()))
                .select()
                .apis(RequestHandlerSelectors.any())
                .paths(PathSelectors.any())
                .build();
    }

    private ApiKey apiKey() {
        return new ApiKey("JWT", "Authorization", "header");
    }

    private SecurityContext securityContext() {
        return SecurityContext.builder()
                .securityReferences(List.of(new SecurityReference("JWT", new AuthorizationScope[0])))
                .build();
    }
}

================================
Advantages of Using Swagger:-
===============================
->Time-Saving: Auto-generates API documentation from your code.
->Interactive Testing: Developers and QA teams can directly test APIs.
->Standardization: Promotes consistency across APIs.
->Cross-Team Collaboration: Simplifies understanding for developers, testers, and stakeholders.
->Client SDKs: Simplifies integration for consumers of your API.


====================
Real-Life Use Case:-
====================
For an e-commerce application:
->Document APIs for products, orders, and users.
->Test endpoints (e.g., /products, /cart) interactively.
->Share Swagger documentation with frontend developers or third-party integrators for smooth collaboration.
->By implementing Swagger, you ensure that your APIs are well-documented, easily testable, and accessible to all stakeholders.