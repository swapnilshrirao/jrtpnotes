========================================
CoServiceImpl class
=====================================
package com.example.demo.service;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.binding.CoResponse;
import com.example.demo.entity.CitizenAppEntity;
import com.example.demo.entity.CoTriggerEntity;
import com.example.demo.entity.DcCaseEntity;
import com.example.demo.entity.EligDtlsEntity;
import com.example.demo.repository.CitizenAppRepository;
import com.example.demo.repository.CoTriggerRepository;
import com.example.demo.repository.DcCaseRepo;
import com.example.demo.repository.EligDtlsRepository;
import com.example.demo.utils.EmailUtils;

import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;


@Service
public class CoServiceImpl implements CoService {
	
	@Autowired
	private CoTriggerRepository coTrgRepo;
	
	@Autowired
	private EligDtlsRepository eligRepo;
	
	@Autowired
	private CitizenAppRepository appRepo;
	
	@Autowired
	private DcCaseRepo dcCaseRepo;
	
	@Autowired
	private EmailUtils emailUtils;

	@Override
	public CoResponse processPendingTriggers() {
		
		CoResponse response=new CoResponse();
		CitizenAppEntity appEntity=null;
		//fetch all pending triggers
		
List<CoTriggerEntity> pendingTrgs = coTrgRepo.findByTrgStatus("pending");

response.setTotalTriggers(Long.valueOf(pendingTrgs.size()));

//process each pending triggers

for(CoTriggerEntity entity:pendingTrgs) {
	
	//get eligibility data based on caseNum
	
EligDtlsEntity elig= eligRepo.findByCaseNum(entity.getCaseNum());

//get citizen data based on case num

Optional<DcCaseEntity> findById = dcCaseRepo.findById(entity.getCaseNum());

if (findById.isPresent()) {

	DcCaseEntity dcCaseEntity = findById.get();

	Integer appId = dcCaseEntity.getAppId();

	Optional<CitizenAppEntity> appEntityoptional = appRepo.findById(appId);

	if (appEntityoptional.isPresent()) {

		appEntity = appEntityoptional.get();
	}

}

//generate pdf with elig details
//send pdf to citizen mail
Long failed=0l;
Long success=0l;
try {
generateAndSendPdf(elig,appEntity);
success++;
}catch(Exception e){
	e.printStackTrace();
	failed++;
}

response.setFailedTriggers(failed);
response.setSuccTriggers(success);



//store the pdf & update trigger as completed
return appEntity;
}
	

public void generateAndSendPdf(EligDtlsEntity elig,CitizenAppEntity appEntity) throws Exception{


	Document document = new Document(PageSize.A4);
	
	File file=new File(elig.getCaseNum() + ".pdf");
	
	FileOutputStream fos=null;
	try {
	 fos=new FileOutputStream(file);
	}catch(FileNotFoundException e){
		e.printStackTrace();
	}

	PdfWriter.getInstance(document, fos);

	document.open();

	Font font = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
	font.setSize(18);
	font.setColor(Color.BLUE);

	Paragraph p = new Paragraph("Eligibilityreport",font);
	p.setAlignment(Paragraph.ALIGN_CENTER);

	document.add(p);

	PdfPTable table = new PdfPTable(7);
	table.setWidthPercentage(100f);
	table.setWidths(new float[] { 1.5f, 3.5f, 3.0f, 1.5f, 3.0f,1.5f, 3.0f});
	table.setSpacingBefore(10);

	PdfPCell cell = new PdfPCell();
	cell.setBackgroundColor(Color.BLUE);
	cell.setPadding(5);

	font = FontFactory.getFont(FontFactory.HELVETICA);
	font.setColor(Color.WHITE);

	cell.setPhrase(new Phrase("Citizen Name",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Name",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Status",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Start Date",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan End Date", font));
	table.addCell(cell);
	
	cell.setPhrase(new Phrase("Benefit Amount", font));
	table.addCell(cell);
	
	cell.setPhrase(new Phrase("Danial Reason", font));
	table.addCell(cell);

	
		table.addCell(appEntity.getFullName());
		table.addCell(elig.getPlanName());
		table.addCell(elig.getPlanStatus());
		table.addCell(elig.getPlanStartDate() +"");
		table.addCell(elig.getPlanEndDate()+"");
		table.addCell(elig.getBenefitAmt() +"");
		table.addCell(elig.getDenialReason());
		
		
		document.add(table);
		
		document.close();
		 String subject="His Eligibility Info";
		 String body="His Eligibility Info";		
		emailUtils.sendEmail(appEntity.getEmail(), subject, body, file);
		updateTrigger(elig.getCaseNum(),file);
		
		//file.delete();   //to delete the generated file from project structure

	}


private void updateTrigger(Long caseNum,File file) throws Exception {
	
	CoTriggerEntity coEntity=coTrgRepo.findByCaseNum(caseNum);
	
	byte[] arr=new byte[(byte)file.length()];
	
	
	//read the data from this file & store it into array
	FileInputStream fis=new FileInputStream(file);
	
	fis.read(arr);
	
	coEntity.setCoPdf(arr);
	
	coEntity.setTrgStatus("Completed");
	
	
	coTrgRepo.save(coEntity);
	
	fis.close();
}

}
=====================================================================================================
================================
Modify class CoserviceImpl
============================

package com.example.demo.service;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.binding.CoResponse;
import com.example.demo.entity.CitizenAppEntity;
import com.example.demo.entity.CoTriggerEntity;
import com.example.demo.entity.DcCaseEntity;
import com.example.demo.entity.EligDtlsEntity;
import com.example.demo.repository.CitizenAppRepository;
import com.example.demo.repository.CoTriggerRepository;
import com.example.demo.repository.DcCaseRepo;
import com.example.demo.repository.EligDtlsRepository;
import com.example.demo.utils.EmailUtils;

import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;


@Service
public class CoServiceImpl implements CoService {
	
	@Autowired
	private CoTriggerRepository coTrgRepo;
	
	@Autowired
	private EligDtlsRepository eligRepo;
	
	@Autowired
	private CitizenAppRepository appRepo;
	
	@Autowired
	private DcCaseRepo dcCaseRepo;
	
	@Autowired
	private EmailUtils emailUtils;

	@Override
	public CoResponse processPendingTriggers() {
		
		Long failed=0l;
		Long success=0l;
		
		CoResponse response=new CoResponse();
		CitizenAppEntity appEntity=null;
		//fetch all pending triggers
		
List<CoTriggerEntity> pendingTrgs = coTrgRepo.findByTrgStatus("pending");

response.setTotalTriggers(Long.valueOf(pendingTrgs.size()));

//process each pending triggers

for(CoTriggerEntity entity:pendingTrgs) {
	try {
	processTrigger(response,entity);
	success++;
}catch(Exception e) {
	e.printStackTrace();
	failed++;
}
}

response.setFailedTriggers(failed);
response.setSuccTriggers(success);
return response;
	}
	
	private CitizenAppEntity processTrigger(CoResponse response,CoTriggerEntity entity) {
		
		CitizenAppEntity appEntity=null;
	//get eligibility data based on caseNum
	
EligDtlsEntity elig= eligRepo.findByCaseNum(entity.getCaseNum());

//get citizen data based on case num

Optional<DcCaseEntity> findById = dcCaseRepo.findById(entity.getCaseNum());

if (findById.isPresent()) {

	DcCaseEntity dcCaseEntity = findById.get();

	Integer appId = dcCaseEntity.getAppId();

	Optional<CitizenAppEntity> appEntityoptional = appRepo.findById(appId);

	if (appEntityoptional.isPresent()) {

		appEntity = appEntityoptional.get();
	}

}

//generate pdf with elig details
//send pdf to citizen mail


try {
    generateAndSendPdf(elig, appEntity);
} catch (Exception e) {
    // Handle the exception or log it
    e.printStackTrace();
}
//store the pdf & update trigger as completed
return appEntity;
}



public void generateAndSendPdf(EligDtlsEntity elig,CitizenAppEntity appEntity) throws Exception{


	Document document = new Document(PageSize.A4);
	
	File file=new File(elig.getCaseNum() + ".pdf");
	
	FileOutputStream fos=null;
	try {
	 fos=new FileOutputStream(file);
	}catch(FileNotFoundException e){
		e.printStackTrace();
	}

	PdfWriter.getInstance(document, fos);

	document.open();

	Font font = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
	font.setSize(18);
	font.setColor(Color.BLUE);

	Paragraph p = new Paragraph("Eligibilityreport",font);
	p.setAlignment(Paragraph.ALIGN_CENTER);

	document.add(p);

	PdfPTable table = new PdfPTable(7);
	table.setWidthPercentage(100f);
	table.setWidths(new float[] { 1.5f, 3.5f, 3.0f, 1.5f, 3.0f,1.5f, 3.0f});
	table.setSpacingBefore(10);

	PdfPCell cell = new PdfPCell();
	cell.setBackgroundColor(Color.BLUE);
	cell.setPadding(5);

	font = FontFactory.getFont(FontFactory.HELVETICA);
	font.setColor(Color.WHITE);

	cell.setPhrase(new Phrase("Citizen Name",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Name",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Status",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Start Date",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan End Date", font));
	table.addCell(cell);
	
	cell.setPhrase(new Phrase("Benefit Amount", font));
	table.addCell(cell);
	
	cell.setPhrase(new Phrase("Danial Reason", font));
	table.addCell(cell);

	
		table.addCell(appEntity.getFullName());
		table.addCell(elig.getPlanName());
		table.addCell(elig.getPlanStatus());
		table.addCell(elig.getPlanStartDate() +"");
		table.addCell(elig.getPlanEndDate()+"");
		table.addCell(elig.getBenefitAmt() +"");
		table.addCell(elig.getDenialReason());
		
		
		document.add(table);
		
		document.close();
		 String subject="His Eligibility Info";
		 String body="His Eligibility Info";		
		//emailUtils.sendEmail(appEntity.getEmail(), subject, body, file);
		updateTrigger(elig.getCaseNum(),file);
		
		file.delete();   //to delete the generated file from project structure

	}


private void updateTrigger(Long caseNum,File file) throws Exception {
	
	CoTriggerEntity coEntity=coTrgRepo.findByCaseNum(caseNum);
	
	byte[] arr=new byte[(byte)file.length()];
	
	
	//read the data from this file & store it into array
	FileInputStream fis=new FileInputStream(file);
	
	fis.read(arr);
	
	coEntity.setCoPdf(arr);
	
	coEntity.setTrgStatus("Completed");
	
	
	coTrgRepo.save(coEntity);
	
	fis.close();
}

}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
=============================================
CoserviceImpl class-using multithreading
============================================


package com.example.demo.service;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorCompletionService;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.demo.binding.CoResponse;
import com.example.demo.entity.CitizenAppEntity;
import com.example.demo.entity.CoTriggerEntity;
import com.example.demo.entity.DcCaseEntity;
import com.example.demo.entity.EligDtlsEntity;
import com.example.demo.repository.CitizenAppRepository;
import com.example.demo.repository.CoTriggerRepository;
import com.example.demo.repository.DcCaseRepo;
import com.example.demo.repository.EligDtlsRepository;
import com.example.demo.utils.EmailUtils;

import com.lowagie.text.Document;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;


@Service
public class CoServiceImpl implements CoService {
	
	@Autowired
	private CoTriggerRepository coTrgRepo;
	
	@Autowired
	private EligDtlsRepository eligRepo;
	
	@Autowired
	private CitizenAppRepository appRepo;
	
	@Autowired
	private DcCaseRepo dcCaseRepo;
	
	@Autowired
	private EmailUtils emailUtils;

	@Override
	public CoResponse processPendingTriggers() {
		
		Long failed=0l;
		Long success=0l;
		
		CoResponse response=new CoResponse();
		CitizenAppEntity appEntity=null;
		//fetch all pending triggers
		
List<CoTriggerEntity> pendingTrgs = coTrgRepo.findByTrgStatus("pending");

response.setTotalTriggers(Long.valueOf(pendingTrgs.size()));



ExecutorService executorService=Executors.newFixedThreadPool(10);
ExecutorCompletionService<Object> pool=new ExecutorCompletionService<>(executorService);

//process each pending triggers
for(CoTriggerEntity entity:pendingTrgs) {
	
	pool.submit(new Callable<Object>() {
		
		@Override
		public Object call() throws Exception {
			try {
				processTrigger(response,entity);
				
			}catch(Exception e) {
				e.printStackTrace();
				
			}
			return null;
		}
	});
}



response.setFailedTriggers(failed);
response.setSuccTriggers(success);
return response;
	}
	
	private CitizenAppEntity processTrigger(CoResponse response,CoTriggerEntity entity) {
		
		CitizenAppEntity appEntity=null;
	//get eligibility data based on caseNum
	
EligDtlsEntity elig= eligRepo.findByCaseNum(entity.getCaseNum());

//get citizen data based on case num

Optional<DcCaseEntity> findById = dcCaseRepo.findById(entity.getCaseNum());

if (findById.isPresent()) {

	DcCaseEntity dcCaseEntity = findById.get();

	Integer appId = dcCaseEntity.getAppId();

	Optional<CitizenAppEntity> appEntityoptional = appRepo.findById(appId);

	if (appEntityoptional.isPresent()) {

		appEntity = appEntityoptional.get();
	}

}

//generate pdf with elig details
//send pdf to citizen mail


try {
    generateAndSendPdf(elig, appEntity);
} catch (Exception e) {
    // Handle the exception or log it
    e.printStackTrace();
}
//store the pdf & update trigger as completed
return appEntity;
}



public void generateAndSendPdf(EligDtlsEntity elig,CitizenAppEntity appEntity) throws Exception{


	Document document = new Document(PageSize.A4);
	
	File file=new File(elig.getCaseNum() + ".pdf");
	
	FileOutputStream fos=null;
	try {
	 fos=new FileOutputStream(file);
	}catch(FileNotFoundException e){
		e.printStackTrace();
	}

	PdfWriter.getInstance(document, fos);

	document.open();

	Font font = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
	font.setSize(18);
	font.setColor(Color.BLUE);

	Paragraph p = new Paragraph("Eligibilityreport",font);
	p.setAlignment(Paragraph.ALIGN_CENTER);

	document.add(p);

	PdfPTable table = new PdfPTable(7);
	table.setWidthPercentage(100f);
	table.setWidths(new float[] { 1.5f, 3.5f, 3.0f, 1.5f, 3.0f,1.5f, 3.0f});
	table.setSpacingBefore(10);

	PdfPCell cell = new PdfPCell();
	cell.setBackgroundColor(Color.BLUE);
	cell.setPadding(5);

	font = FontFactory.getFont(FontFactory.HELVETICA);
	font.setColor(Color.WHITE);

	cell.setPhrase(new Phrase("Citizen Name",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Name",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Status",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan Start Date",font));
	table.addCell(cell);

	cell.setPhrase(new Phrase("Plan End Date", font));
	table.addCell(cell);
	
	cell.setPhrase(new Phrase("Benefit Amount", font));
	table.addCell(cell);
	
	cell.setPhrase(new Phrase("Danial Reason", font));
	table.addCell(cell);

	
		table.addCell(appEntity.getFullName());
		table.addCell(elig.getPlanName());
		table.addCell(elig.getPlanStatus());
		table.addCell(elig.getPlanStartDate() +"");
		table.addCell(elig.getPlanEndDate()+"");
		table.addCell(elig.getBenefitAmt() +"");
		table.addCell(elig.getDenialReason());
		
		
		document.add(table);
		
		document.close();
		 String subject="His Eligibility Info";
		 String body="His Eligibility Info";		
		//emailUtils.sendEmail(appEntity.getEmail(), subject, body, file);
		updateTrigger(elig.getCaseNum(),file);
		
		file.delete();   //to delete the generated file from project structure

	}


private void updateTrigger(Long caseNum,File file) throws Exception {
	
	CoTriggerEntity coEntity=coTrgRepo.findByCaseNum(caseNum);
	
	byte[] arr=new byte[(byte)file.length()];
	
	
	//read the data from this file & store it into array
	FileInputStream fis=new FileInputStream(file);
	
	fis.read(arr);
	
	coEntity.setCoPdf(arr);
	
	coEntity.setTrgStatus("Completed");
	
	
	coTrgRepo.save(coEntity);
	
	fis.close();
}

}









